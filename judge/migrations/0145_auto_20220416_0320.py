# Generated by Django 2.2.24 on 2022-04-16 03:20

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import jsonfield.fields
import judge.models.contest


class Migration(migrations.Migration):

    dependencies = [
        ('judge', '0144_auto_20220411_0713'),
    ]

    operations = [
        migrations.CreateModel(
            name='SampleContest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[a-z0-9]+$', 'Contest id must be ^[a-z0-9]+$')], verbose_name='contest id')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='contest name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('time_limit', models.DurationField(blank=True, null=True, verbose_name='time limit')),
                ('is_visible', models.BooleanField(default=False, help_text='Should be set even for organization-private contests, where it determines whether the contest is visible to members of the specified organizations.', verbose_name='publicly visible')),
                ('is_rated', models.BooleanField(default=False, help_text='Whether this contest can be rated.', verbose_name='contest rated')),
                ('scoreboard_visibility', models.CharField(choices=[('V', 'Visible'), ('C', 'Hidden for duration of contest'), ('P', 'Hidden for duration of participation')], default='V', help_text='Scoreboard visibility through the duration of the contest', max_length=1, verbose_name='scoreboard visibility')),
                ('use_clarifications', models.BooleanField(default=True, help_text='Use clarification system instead of comments.', verbose_name='no comments')),
                ('rating_floor', models.IntegerField(blank=True, help_text='Rating floor for contest', null=True, verbose_name='rating floor')),
                ('rating_ceiling', models.IntegerField(choices=[(1000, 'Newbie'), (1300, 'Amateur'), (1600, 'Expert'), (1900, 'Candidate Master'), (2400, 'Master'), (3000, 'Grandmaster'), (4000, 'Target')], default=1000, help_text='Rating ceiling for contest', verbose_name='rating ceiling')),
                ('rate_all', models.BooleanField(default=False, help_text='Rate all users who joined.', verbose_name='rate all')),
                ('hide_problem_tags', models.BooleanField(default=False, help_text='Whether problem tags should be hidden by default.', verbose_name='hide problem tags')),
                ('hide_problem_authors', models.BooleanField(default=False, help_text='Whether problem authors should be hidden by default.', verbose_name='hide problem authors')),
                ('run_pretests_only', models.BooleanField(default=False, help_text='Whether judges should grade pretests only, versus all testcases. Commonly set during a contest, then unset prior to rejudging user submissions when the contest ends.', verbose_name='run pretests only')),
                ('logo_override_image', models.CharField(blank=True, default='', help_text='This image will replace the default site logo for users inside the contest.', max_length=150, verbose_name='Logo override image')),
                ('is_full_markup', models.BooleanField(default=False, verbose_name='markup full')),
                ('summary', models.TextField(blank=True, help_text='Plain-text, shown in meta description tag, e.g. for social media.', verbose_name='contest summary')),
                ('access_code', models.CharField(blank=True, default='', help_text='An optional code to prompt contestants before they are allowed to join the contest. Leave it blank to disable.', max_length=255, verbose_name='access code')),
                ('format_name', models.CharField(choices=[('atcoder', 'AtCoder'), ('default', 'Default'), ('ecoo', 'ECOO'), ('icpc', 'ICPC'), ('ioi', 'IOI (pre-2016)'), ('ioi16', 'IOI'), ('tmath', 'Tmath')], default='default', help_text='The contest format module to use.', max_length=32, verbose_name='contest format')),
                ('format_config', jsonfield.fields.JSONField(blank=True, help_text='A JSON object to serve as the configuration for the chosen contest format module. Leave empty to use None. Exact format depends on the contest format selected.', null=True, verbose_name='contest format configuration')),
                ('problem_label_script', models.TextField(blank=True, help_text='A custom Lua function to generate problem labels. Requires a single function with an integer parameter, the zero-indexed contest problem index, and returns a string, the label.', verbose_name='contest problem label script')),
                ('points_precision', models.IntegerField(default=3, help_text='Number of digits to round points to.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='precision points')),
                ('problems', models.ManyToManyField(to='judge.Problem', verbose_name='problems')),
                ('tags', models.ManyToManyField(blank=True, related_name='samplecontests', to='judge.ContestTag', verbose_name='contest tags')),
            ],
            options={
                'verbose_name': 'sample contest',
                'verbose_name_plural': 'sample contests',
            },
        ),
        migrations.AlterField(
            model_name='profile',
            name='last_change_name',
            field=models.DateTimeField(default=datetime.datetime(2022, 3, 17, 3, 20, 47, 87097, tzinfo=utc), verbose_name='last change fullname'),
        ),
        migrations.CreateModel(
            name='SampleContestProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(verbose_name='points')),
                ('partial', models.BooleanField(default=True, verbose_name='partial')),
                ('is_pretested', models.BooleanField(default=False, verbose_name='is pretested')),
                ('order', models.PositiveIntegerField(db_index=True, verbose_name='order')),
                ('output_prefix_override', models.IntegerField(blank=True, default=0, null=True, verbose_name='output prefix length override')),
                ('max_submissions', models.IntegerField(blank=True, default=None, help_text='Maximum number of submissions for this problem, or leave blank for no limit.', null=True, validators=[judge.models.contest.MinValueOrNoneValidator(1, "Why include a problem you can't submit to?")])),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_problems', to='judge.SampleContest', verbose_name='contest')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samplecontests', to='judge.Problem', verbose_name='problem')),
            ],
            options={
                'verbose_name': 'sample contest problem',
                'verbose_name_plural': 'sample contest problems',
                'ordering': ('order',),
                'unique_together': {('problem', 'contest')},
            },
        ),
    ]

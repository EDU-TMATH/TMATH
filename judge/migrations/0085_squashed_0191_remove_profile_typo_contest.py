# Generated by Django 4.2.20 on 2025-04-27 03:23

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields
import judge.models.contest
import judge.models.problem
import judge.models.problem_data
import judge.models.profile
import judge.models.runtime
import judge.utils.problem_data


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('judge', '0001_squashed_0084_contest_formats'),
    ]

    replaces = [
        ("judge", "0085_submission_source"),
        ("judge", "0086_rating_ceiling"),
        ("judge", "0087_problem_resource_limits"),
        ("judge", "0088_private_contests"),
        ("judge", "0089_submission_to_contest"),
        ("judge", "0090_fix_contest_visibility"),
        ("judge", "0091_compiler_message_ansi2html"),
        ("judge", "0092_contest_clone"),
        ("judge", "0093_contest_moss"),
        ("judge", "0094_submissiontestcase_unique_together"),
        ("judge", "0095_organization_logo_override"),
        ("judge", "0096_profile_language_set_default"),
        ("judge", "0097_participation_is_disqualified"),
        ("judge", "0098_view_contest_scoreboard"),
        ("judge", "0099_contest_problem_label"),
        ("judge", "0100_contest_visiblity_permission"),
        ("judge", "0101_submission_judged_date"),
        ("judge", "0102_api_token"),
        ("judge", "0103_contest_participation_tiebreak_field"),
        ("judge", "0104_contestproblem_maxsubs"),
        ("judge", "0105_webauthn"),
        ("judge", "0106_user_data_download"),
        ("judge", "0107_submission_lock"),
        ("judge", "0108_bleach_problems"),
        ("judge", "0109_scratch_codes"),
        ("judge", "0110_default_output_prefix_override"),
        ("judge", "0111_blank_assignees_ticket"),
        ("judge", "0112_language_extensions"),
        ("judge", "0113_contest_decimal_points"),
        ("judge", "0114_remove_org_registrant"),
        ("judge", "0115_contest_scoreboard_visibility"),
        ("judge", "0116_contest_curator_and_tester"),
        ("judge", "0117_remove_private_messages"),
        ("judge", "0118_convert_to_dates"),
        ("judge", "0119_hide_problem_authors"),
        ("judge", "0120_totp_no_reuse"),
        ("judge", "0121_per_problem_sub_access_control"),
        ("judge", "0122_auto_20210703_1534"),
        ("judge", "0123_auto_20211024_1338"),
        ("judge", "0124_auto_20211205_0652"),
        ("judge", "0125_auto_20211207_0213"),
        ("judge", "0126_auto_20211207_0215"),
        ("judge", "0127_auto_20211207_0222"),
        ("judge", "0128_auto_20211207_0223"),
        ("judge", "0129_auto_20211207_0225"),
        ("judge", "0130_auto_20220212_0944"),
        ("judge", "0131_profile_current_exam"),
        ("judge", "0132_profile_emath"),
        ("judge", "0133_auto_20220225_1602"),
        ("judge", "0134_auto_20220225_1608"),
        ("judge", "0135_organization_rate"),
        ("judge", "0136_profile_last_change_name"),
        ("judge", "0137_auto_20220228_1508"),
        ("judge", "0138_auto_20220324_0351"),
        ("judge", "0139_auto_20220329_1305"),
        ("judge", "0140_auto_20220401_1131"),
        ("judge", "0141_auto_20220402_0751"),
        ("judge", "0142_auto_20220402_1332"),
        ("judge", "0143_auto_20220405_0423"),
        ("judge", "0144_auto_20220411_0713"),
        ("judge", "0145_auto_20220416_0320"),
        ("judge", "0146_auto_20220617_0615"),
        ("judge", "0147_auto_20220710_1619"),
        ("judge", "0148_problem_testcase_visibility_mode"),
        ("judge", "0149_auto_20220901_1347"),
        ("judge", "0150_profile_typo_contest"),
        ("judge", "0151_auto_20220903_0441"),
        ("judge", "0152_auto_20220926_1236"),
        ("judge", "0153_log"),
        ("judge", "0154_organizationrequest_admin"),
        ("judge", "0155_auto_20221028_0635"),
        ("judge", "0156_alter_contestparticipation_cumtime"),
        ("judge", "0157_auto_20221106_0216"),
        ("judge", "0158_problemdata_grader_args"),
        ("judge", "0159_alter_problem_options"),
        ("judge", "0160_problemtype_priority"),
        ("judge", "0161_problem_public_description"),
        ("judge", "0162_contest_pre_time"),
        ("judge", "0163_loggedinuser"),
        ("judge", "0164_auto_20230301_1210"),
        ("judge", "0165_contest_is_public_contest"),
        ("judge", "0166_alter_profile_timezone"),
        ("judge", "0167_profile_verified"),
        ("judge", "0168_contest_topic"),
        ("judge", "0169_alter_contest_name"),
        ("judge", "0170_alter_contest_authors_alter_contest_curators_and_more"),
        ("judge", "0171_remove_profile_is_totp_enabled_and_more"),
        ("judge", "0172_curriculum_publicproblem_curriculumcontest_and_more"),
        ("judge", "0173_profile_super_admin"),
        ("judge", "0174_logdownloadtestcase"),
        ("judge", "0175_profile_can_download_all_testcases"),
        ("judge", "0176_alter_submissionsource_source"),
        ("judge", "0177_contestproblem_limit_point"),
        ("judge", "0178_alter_comment_body_alter_organization_about_and_more"),
        ("judge", "0179_contest_fastio"),
        ("judge", "0180_alter_problem_memory_limit_alter_problem_points_and_more"),
        ("judge", "0181_alter_contestproblem_limit_point"),
        ("judge", "0182_contest_forbidden_words"),
        ("judge", "0183_alter_contest_forbidden_words"),
        ("judge", "0184_alter_organizationrequest_state"),
        ("judge", "0185_alter_contest_options_and_more"),
        ("judge", "0186_remove_contestproblem_first_accept"),
        ("judge", "0187_problem_approved"),
        ("judge", "0188_alter_contest_format_name_and_more"),
        ("judge", "0189_alter_profile_timezone"),
        ("judge", "0190_alter_contestproblem_options"),
        ("judge", "0191_remove_profile_typo_contest"),
    ]


    operations = [
        migrations.CreateModel(
            name='ContestLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='code for this contest level', max_length=50, unique=True, verbose_name='code')),
                ('about', models.CharField(help_text='detail for this contest level', max_length=255, verbose_name='description')),
            ],
            options={
                'verbose_name': 'contest level',
                'verbose_name_plural': 'contest levels',
            },
        ),
        migrations.CreateModel(
            name='ContestMoss',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(max_length=10)),
                ('submission_count', models.PositiveIntegerField(default=0)),
                ('url', models.URLField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'contest moss result',
                'verbose_name_plural': 'contest moss results',
            },
        ),
        migrations.CreateModel(
            name='CourseModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(max_length=20, verbose_name='Language')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('about', models.CharField(max_length=200, verbose_name='about')),
                ('link', models.URLField(blank=True, db_index=True, default=None, max_length=128, null=True, verbose_name='link')),
                ('is_publish', models.BooleanField(db_index=True, default=False, verbose_name='Publish')),
            ],
            options={
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
                'permissions': (('edit_course', 'Edit all course'),),
            },
        ),
        migrations.CreateModel(
            name='Curriculum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the curriculum', max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, help_text='Description of the curriculum', verbose_name='description')),
            ],
        ),
        migrations.CreateModel(
            name='CurriculumContest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, help_text='Description of the contest in the curriculum', max_length=255, verbose_name='description')),
                ('order', models.IntegerField(default=0, help_text='Order of the contest in the curriculum', verbose_name='order')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='title')),
                ('message', models.CharField(max_length=255, verbose_name='message')),
                ('object_id', models.IntegerField(verbose_name='object id')),
                ('object_title', models.CharField(max_length=255, verbose_name='object title')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='time')),
            ],
            options={
                'verbose_name': 'logging',
                'ordering': ('-time',),
            },
        ),
        migrations.CreateModel(
            name='LogDownloadTestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(verbose_name='case position')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='LoggedInUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=32, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='logged_in_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'loggedinuser',
                'verbose_name_plural': 'loggedinusers',
            },
        ),
        migrations.CreateModel(
            name='ProblemCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='problem category ID')),
                ('full_name', models.CharField(max_length=100, verbose_name='problem category name')),
            ],
            options={
                'verbose_name': 'problem category',
                'verbose_name_plural': 'problem categories',
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='ProblemClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='problem class ID')),
                ('full_name', models.CharField(max_length=100, verbose_name='problem class name')),
            ],
            options={
                'verbose_name': 'problem class',
                'verbose_name_plural': 'problem classes',
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='PublicProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, help_text='Order of the problem in the curriculum', verbose_name='order')),
                ('curriculum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curriculum_problems', to='judge.curriculum', verbose_name='curriculum')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='PublicSolution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(verbose_name='solution')),
                ('score', models.IntegerField(default=0, verbose_name='votes')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('approved', models.BooleanField(default=False, verbose_name='is approved')),
                ('point', models.IntegerField(default=0, verbose_name='point')),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SampleContest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[a-z0-9]+$', 'Contest id must be ^[a-z0-9]+$')], verbose_name='contest id')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='contest name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('time_limit', models.DurationField(blank=True, null=True, verbose_name='time limit')),
                ('is_visible', models.BooleanField(default=False, help_text='Should be set even for organization-private contests, where it determines whether the contest is visible to members of the specified organizations.', verbose_name='publicly visible')),
                ('is_rated', models.BooleanField(default=False, help_text='Whether this contest can be rated.', verbose_name='contest rated')),
                ('scoreboard_visibility', models.CharField(choices=[('V', 'Visible'), ('C', 'Hidden for duration of contest'), ('P', 'Hidden for duration of participation')], default='V', help_text='Scoreboard visibility through the duration of the contest', max_length=1, verbose_name='scoreboard visibility')),
                ('use_clarifications', models.BooleanField(default=True, help_text='Use clarification system instead of comments.', verbose_name='no comments')),
                ('rating_floor', models.IntegerField(blank=True, help_text='Rating floor for contest', null=True, verbose_name='rating floor')),
                ('rating_ceiling', models.IntegerField(choices=[(1000, 'Newbie'), (1300, 'Amateur'), (1600, 'Expert'), (1900, 'Candidate Master'), (2400, 'Master'), (3000, 'Grandmaster'), (4000, 'Target')], default=1000, help_text='Rating ceiling for contest', verbose_name='rating ceiling')),
                ('rate_all', models.BooleanField(default=False, help_text='Rate all users who joined.', verbose_name='rate all')),
                ('hide_problem_tags', models.BooleanField(default=False, help_text='Whether problem tags should be hidden by default.', verbose_name='hide problem tags')),
                ('hide_problem_authors', models.BooleanField(default=False, help_text='Whether problem authors should be hidden by default.', verbose_name='hide problem authors')),
                ('run_pretests_only', models.BooleanField(default=False, help_text='Whether judges should grade pretests only, versus all testcases. Commonly set during a contest, then unset prior to rejudging user submissions when the contest ends.', verbose_name='run pretests only')),
                ('logo_override_image', models.CharField(blank=True, default='', help_text='This image will replace the default site logo for users inside the contest.', max_length=150, verbose_name='Logo override image')),
                ('is_full_markup', models.BooleanField(default=False, verbose_name='markup full')),
                ('summary', models.TextField(blank=True, help_text='Plain-text, shown in meta description tag, e.g. for social media.', verbose_name='contest summary')),
                ('access_code', models.CharField(blank=True, default='', help_text='An optional code to prompt contestants before they are allowed to join the contest. Leave it blank to disable.', max_length=255, verbose_name='access code')),
                ('format_name', models.CharField(choices=[('atcoder', 'AtCoder'), ('default', 'Default'), ('default_limit', 'Default Limit'), ('ecoo', 'ECOO'), ('icpc', 'ICPC'), ('ioi', 'IOI (pre-2016)'), ('ioi16', 'IOI'), ('tmath', 'Tmath')], default='default', help_text='The contest format module to use.', max_length=32, verbose_name='contest format')),
                ('format_config', jsonfield.fields.JSONField(blank=True, help_text='A JSON object to serve as the configuration for the chosen contest format module. Leave empty to use None. Exact format depends on the contest format selected.', null=True, verbose_name='contest format configuration')),
                ('problem_label_script', models.TextField(blank=True, help_text='A custom Lua function to generate problem labels. Requires a single function with an integer parameter, the zero-indexed contest problem index, and returns a string, the label.', verbose_name='contest problem label script')),
                ('points_precision', models.IntegerField(default=3, help_text='Number of digits to round points to.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='precision points')),
                ('level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='judge.contestlevel', verbose_name='contest level')),
            ],
            options={
                'verbose_name': 'sample contest',
                'verbose_name_plural': 'sample contests',
            },
        ),
        migrations.CreateModel(
            name='SampleContestProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(verbose_name='points')),
                ('partial', models.BooleanField(default=True, verbose_name='partial')),
                ('is_pretested', models.BooleanField(default=False, verbose_name='is pretested')),
                ('order', models.PositiveIntegerField(db_index=True, verbose_name='order')),
                ('output_prefix_override', models.IntegerField(blank=True, default=0, null=True, verbose_name='output prefix length override')),
                ('max_submissions', models.IntegerField(blank=True, default=None, help_text='Maximum number of submissions for this problem, or leave blank for no limit.', null=True, validators=[judge.models.contest.MinValueOrNoneValidator(1, "Why include a problem you can't submit to?")])),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_problems', to='judge.samplecontest', verbose_name='contest')),
                ('level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='judge.contestlevel', verbose_name='level')),
            ],
            options={
                'verbose_name': 'sample contest problem',
                'verbose_name_plural': 'sample contest problems',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='SchoolYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField(verbose_name='year start')),
                ('finish', models.DateField(verbose_name='year finish')),
            ],
        ),
        migrations.CreateModel(
            name='SolutionVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0)),
                ('solution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='judge.publicsolution')),
            ],
            options={
                'verbose_name': 'solution vote',
                'verbose_name_plural': 'solution votes',
            },
        ),
        migrations.CreateModel(
            name='SubmissionSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.TextField(db_collation='utf8mb4_unicode_ci', max_length=65536, verbose_name='source code')),
                ('file', models.TextField(blank=True, max_length=65536, verbose_name='origin source')),
            ],
        ),
        migrations.CreateModel(
            name='WebAuthnCredential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='device name')),
                ('cred_id', models.CharField(max_length=255, unique=True, verbose_name='credential ID')),
                ('public_key', models.TextField(verbose_name='public key')),
                ('counter', models.BigIntegerField(verbose_name='sign counter')),
            ],
            options={
                'verbose_name': 'WebAuthn credential',
                'verbose_name_plural': 'WebAuthn credentials',
            },
        ),
        migrations.RemoveField(
            model_name='privatemessagethread',
            name='messages',
        ),
        migrations.AlterModelOptions(
            name='contest',
            options={'permissions': (('see_private_contest', 'See private contests'), ('edit_own_contest', 'Edit own contests'), ('edit_all_contest', 'Edit all contests'), ('clone_contest', 'Clone contest'), ('moss_contest', 'MOSS contest'), ('contest_rating', 'Rate contests'), ('contest_access_code', 'Contest access codes'), ('create_private_contest', 'Create private contests'), ('change_contest_visibility', 'Change contest visibility'), ('contest_problem_label', 'Edit contest problem label script'), ('lock_contest', 'Change lock status of contest'), ('download_rank_contest', 'Download rank of contest')), 'verbose_name': 'contest', 'verbose_name_plural': 'contests'},
        ),
        migrations.AlterModelOptions(
            name='contestproblem',
            options={'ordering': ('order',), 'permissions': (('view_all_contest_problem', 'View all contest problem'),), 'verbose_name': 'contest problem', 'verbose_name_plural': 'contest problems'},
        ),
        migrations.AlterModelOptions(
            name='license',
            options={'ordering': ('key',), 'verbose_name': 'license', 'verbose_name_plural': 'licenses'},
        ),
        migrations.AlterModelOptions(
            name='problem',
            options={'ordering': ['-pk'], 'permissions': (('see_private_problem', 'See hidden problems'), ('edit_own_problem', 'Edit own problems'), ('edit_all_problem', 'Edit all problems'), ('edit_public_problem', 'Edit all public problems'), ('problem_full_markup', 'Edit problems with full markup'), ('clone_problem', 'Clone problem'), ('change_public_visibility', 'Change is_public field'), ('change_manually_managed', 'Change is_manually_managed field'), ('see_organization_problem', 'See organization-private problems')), 'verbose_name': 'problem', 'verbose_name_plural': 'problems'},
        ),
        migrations.AlterModelOptions(
            name='profile',
            options={'ordering': ['id'], 'permissions': (('test_site', 'Shows in-progress development stuff'), ('totp', 'Edit TOTP settings')), 'verbose_name': 'user profile', 'verbose_name_plural': 'user profiles'},
        ),
        migrations.AlterModelOptions(
            name='submission',
            options={'permissions': (('abort_any_submission', 'Abort any submission'), ('rejudge_submission', 'Rejudge the submission'), ('rejudge_submission_lot', 'Rejudge a lot of submissions'), ('spam_submission', 'Submit without limit'), ('view_all_submission', 'View all submission'), ('resubmit_other', "Resubmit others' submission"), ('lock_submission', 'Change lock status of submission')), 'verbose_name': 'submission', 'verbose_name_plural': 'submissions'},
        ),
        migrations.RemoveField(
            model_name='contest',
            name='hide_scoreboard',
        ),
        migrations.RemoveField(
            model_name='contest',
            name='is_public',
        ),
        migrations.RemoveField(
            model_name='contest',
            name='organizers',
        ),
        migrations.RemoveField(
            model_name='organization',
            name='registrant',
        ),
        migrations.RemoveField(
            model_name='profile',
            name='is_totp_enabled',
        ),
        migrations.RemoveField(
            model_name='profile',
            name='totp_key',
        ),
        migrations.RemoveField(
            model_name='submission',
            name='source',
        ),
        migrations.RemoveField(
            model_name='submission',
            name='was_rejudged',
        ),
        migrations.AddField(
            model_name='contest',
            name='add_solution',
            field=models.BooleanField(default=False, verbose_name='can add solution'),
        ),
        migrations.AddField(
            model_name='contest',
            name='authors',
            field=models.ManyToManyField(help_text='These users will be able to edit the contest.', related_name='authors+', to='judge.profile'),
        ),
        migrations.AddField(
            model_name='contest',
            name='curators',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to edit the contest, but will not be listed as authors.', related_name='curators+', to='judge.profile'),
        ),
        migrations.AddField(
            model_name='contest',
            name='fastio',
            field=models.BooleanField(default=False, verbose_name='Fast IO'),
        ),
        migrations.AddField(
            model_name='contest',
            name='forbidden_words',
            field=models.TextField(blank=True, help_text='Words that are forbidden in the source code.', verbose_name='forbidden words'),
        ),
        migrations.AddField(
            model_name='contest',
            name='hide_problem_authors',
            field=models.BooleanField(default=False, help_text='Whether problem authors should be hidden by default.', verbose_name='hide problem authors'),
        ),
        migrations.AddField(
            model_name='contest',
            name='is_full_markup',
            field=models.BooleanField(default=False, verbose_name='markup full'),
        ),
        migrations.AddField(
            model_name='contest',
            name='is_limit_language',
            field=models.BooleanField(default=False, verbose_name='language restriction'),
        ),
        migrations.AddField(
            model_name='contest',
            name='is_organization_private',
            field=models.BooleanField(default=False, verbose_name='private to organizations'),
        ),
        migrations.AddField(
            model_name='contest',
            name='is_public_contest',
            field=models.BooleanField(default=False, verbose_name='Public contest'),
        ),
        migrations.AddField(
            model_name='contest',
            name='is_visible',
            field=models.BooleanField(default=False, help_text='Should be set even for organization-private contests, where it determines whether the contest is visible to members of the specified organizations.', verbose_name='publicly visible'),
        ),
        migrations.AddField(
            model_name='contest',
            name='limit_language',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='judge.language', verbose_name='limit language'),
        ),
        migrations.AddField(
            model_name='contest',
            name='limit_solution',
            field=models.IntegerField(default=0, verbose_name='limit solution'),
        ),
        migrations.AddField(
            model_name='contest',
            name='locked_after',
            field=models.DateTimeField(blank=True, help_text='Prevent submissions from this contest from being rejudged after this date.', null=True, verbose_name='contest lock'),
        ),
        migrations.AddField(
            model_name='contest',
            name='points_precision',
            field=models.IntegerField(default=3, help_text='Number of digits to round points to.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='precision points'),
        ),
        migrations.AddField(
            model_name='contest',
            name='pre_time',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Pre-time'),
        ),
        migrations.AddField(
            model_name='contest',
            name='private_contestants',
            field=models.ManyToManyField(blank=True, help_text='If private, only these users may see the contest', related_name='private_contestants+', to='judge.profile', verbose_name='private contestants'),
        ),
        migrations.AddField(
            model_name='contest',
            name='problem_label_script',
            field=models.TextField(blank=True, help_text='A custom Lua function to generate problem labels. Requires a single function with an integer parameter, the zero-indexed contest problem index, and returns a string, the label.', verbose_name='contest problem label script'),
        ),
        migrations.AddField(
            model_name='contest',
            name='rating_ceiling',
            field=models.IntegerField(choices=[(1000, 'Newbie'), (1300, 'Amateur'), (1600, 'Expert'), (1900, 'Candidate Master'), (2400, 'Master'), (3000, 'Grandmaster'), (4000, 'Target')], default=1000, help_text='Rating ceiling for contest', verbose_name='rating ceiling'),
        ),
        migrations.AddField(
            model_name='contest',
            name='rating_floor',
            field=models.IntegerField(blank=True, help_text='Rating floor for contest', null=True, verbose_name='rating floor'),
        ),
        migrations.AddField(
            model_name='contest',
            name='scoreboard_visibility',
            field=models.CharField(choices=[('V', 'Visible'), ('C', 'Hidden for duration of contest'), ('P', 'Hidden for duration of participation')], default='V', help_text='Scoreboard visibility through the duration of the contest', max_length=1, verbose_name='scoreboard visibility'),
        ),
        migrations.AddField(
            model_name='contest',
            name='testers',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to view the contest, but not edit it.', related_name='testers+', to='judge.profile'),
        ),
        migrations.AddField(
            model_name='contest',
            name='topic',
            field=models.CharField(blank=True, max_length=100, verbose_name='contest topic'),
        ),
        migrations.AddField(
            model_name='contest',
            name='view_contest_scoreboard',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to view the scoreboard.', related_name='view_contest_scoreboard', to='judge.profile', verbose_name='view contest scoreboard'),
        ),
        migrations.AddField(
            model_name='contestparticipation',
            name='is_disqualified',
            field=models.BooleanField(default=False, help_text='Whether this participation is disqualified.', verbose_name='is disqualified'),
        ),
        migrations.AddField(
            model_name='contestparticipation',
            name='tiebreaker',
            field=models.FloatField(default=0.0, verbose_name='tie-breaking field'),
        ),
        migrations.AddField(
            model_name='contestproblem',
            name='limit_point',
            field=models.IntegerField(blank=True, default=0, null=True, verbose_name='limit point'),
        ),
        migrations.AddField(
            model_name='language',
            name='file_only',
            field=models.BooleanField(default=False, help_text='If this language is submitted using file or not', verbose_name='File-only language'),
        ),
        migrations.AddField(
            model_name='language',
            name='file_size_limit',
            field=models.IntegerField(blank=True, default=0, help_text='Limit of file size (in MB) if allow submit via file', verbose_name='Limit of file size'),
        ),
        migrations.AddField(
            model_name='navigationbar',
            name='is_admin',
            field=models.BooleanField(default=False, help_text='Only superuser can view link', verbose_name='Admin view'),
        ),
        migrations.AddField(
            model_name='organization',
            name='logo_override_image',
            field=models.CharField(blank=True, default='', help_text='This image will replace the default site logo for users viewing the organization.', max_length=150, verbose_name='Logo override image'),
        ),
        migrations.AddField(
            model_name='organization',
            name='rate',
            field=models.IntegerField(choices=[(1000, 'Newbie'), (1300, 'Amateur'), (1600, 'Expert'), (1900, 'Candidate Master'), (2400, 'Master'), (3000, 'Grandmaster'), (4000, 'Target')], default=1000, verbose_name='Rate of Organization'),
        ),
        migrations.AddField(
            model_name='organizationrequest',
            name='admin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='actions', to='judge.profile', verbose_name='admin'),
        ),
        migrations.AddField(
            model_name='problem',
            name='approved',
            field=models.BooleanField(default=False, verbose_name='approved'),
        ),
        migrations.AddField(
            model_name='problem',
            name='is_full_markup',
            field=models.BooleanField(default=False, verbose_name='allow full markdown access'),
        ),
        migrations.AddField(
            model_name='problem',
            name='public_description',
            field=models.BooleanField(default=False, verbose_name="public description' problem"),
        ),
        migrations.AddField(
            model_name='problem',
            name='submission_source_visibility_mode',
            field=models.CharField(choices=[('F', 'Follow global setting'), ('A', 'Always visible'), ('S', 'Visible if problem solved'), ('O', 'Only own submissions')], default='O', max_length=1, verbose_name='submission source visibility'),
        ),
        migrations.AddField(
            model_name='problem',
            name='testcase_visibility_mode',
            field=models.CharField(choices=[('O', 'Visible for authors'), ('C', 'Visible if user is not in a contest'), ('A', 'Always visible')], default='O', max_length=1, verbose_name='Testcase visibility'),
        ),
        migrations.AddField(
            model_name='problemdata',
            name='custom_validator',
            field=models.FileField(blank=True, null=True, storage=judge.utils.problem_data.ProblemDataStorage(), upload_to=judge.models.problem_data.problem_directory_file, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['cpp', 'py'])], verbose_name='custom checker file'),
        ),
        migrations.AddField(
            model_name='problemdata',
            name='grader_args',
            field=models.TextField(blank=True, help_text='grader arguments as a JSON object', verbose_name='grader arguments'),
        ),
        migrations.AddField(
            model_name='problemtype',
            name='priority',
            field=models.BooleanField(default=False, verbose_name='priority'),
        ),
        migrations.AddField(
            model_name='profile',
            name='api_token',
            field=models.CharField(help_text='64 character hex-encoded API access token', max_length=64, null=True, validators=[django.core.validators.RegexValidator('^[a-f0-9]{64}$', 'API token must be None or hexadecimal')], verbose_name='API token'),
        ),
        migrations.AddField(
            model_name='profile',
            name='can_download_all_testcases',
            field=models.BooleanField(default=False, verbose_name='can download all testcases'),
        ),
        migrations.AddField(
            model_name='profile',
            name='data_last_downloaded',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last data download time'),
        ),
        migrations.AddField(
            model_name='profile',
            name='expiration_date',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='profile',
            name='is_webauthn_enabled',
            field=models.BooleanField(default=False, help_text='check to enable WebAuthn-based two-factor authentication', verbose_name='WebAuthn 2FA enabled'),
        ),
        migrations.AddField(
            model_name='profile',
            name='last_change_name',
            field=models.DateTimeField(default=judge.models.profile.get_default_time, verbose_name='last change fullname'),
        ),
        migrations.AddField(
            model_name='profile',
            name='last_name',
            field=models.CharField(default=None, max_length=255, null=True, verbose_name='prev name'),
        ),
        migrations.AddField(
            model_name='profile',
            name='name',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='profile',
            name='super_admin',
            field=models.BooleanField(default=False, verbose_name='super admin'),
        ),
        migrations.AddField(
            model_name='profile',
            name='verified',
            field=models.BooleanField(default=False, verbose_name='verified'),
        ),
        migrations.AddField(
            model_name='solution',
            name='is_full_markup',
            field=models.BooleanField(default=False, verbose_name='markup full'),
        ),
        migrations.AddField(
            model_name='submission',
            name='contest_object',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='judge.contest', verbose_name='contest'),
        ),
        migrations.AddField(
            model_name='submission',
            name='judged_date',
            field=models.DateTimeField(default=None, null=True, verbose_name='submission judge time'),
        ),
        migrations.AddField(
            model_name='submission',
            name='locked_after',
            field=models.DateTimeField(blank=True, null=True, verbose_name='submission lock'),
        ),
        migrations.AddField(
            model_name='submission',
            name='rejudged_date',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last rejudge date by admin'),
        ),
        migrations.AlterField(
            model_name='comment',
            name='body',
            field=models.TextField(db_collation='utf8mb4_unicode_ci', max_length=8192, verbose_name='body of comment'),
        ),
        migrations.AlterField(
            model_name='comment',
            name='level',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AlterField(
            model_name='comment',
            name='lft',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AlterField(
            model_name='comment',
            name='rght',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AlterField(
            model_name='contest',
            name='format_name',
            field=models.CharField(choices=[('atcoder', 'AtCoder'), ('default', 'Default'), ('default_limit', 'Default Limit'), ('ecoo', 'ECOO'), ('icpc', 'ICPC'), ('ioi', 'IOI (pre-2016)'), ('ioi16', 'IOI'), ('tmath', 'Tmath')], default='default', help_text='The contest format module to use.', max_length=32, verbose_name='contest format'),
        ),
        migrations.AlterField(
            model_name='contest',
            name='is_private',
            field=models.BooleanField(default=False, verbose_name='private to specific users'),
        ),
        migrations.AlterField(
            model_name='contest',
            name='name',
            field=models.CharField(db_index=True, max_length=20, verbose_name='contest name'),
        ),
        migrations.AlterField(
            model_name='contest',
            name='rate_exclude',
            field=models.ManyToManyField(blank=True, related_name='rate_exclude+', to='judge.profile', verbose_name='exclude from ratings'),
        ),
        migrations.AlterField(
            model_name='contestparticipation',
            name='cumtime',
            field=models.PositiveBigIntegerField(default=0, verbose_name='cumulative time'),
        ),
        migrations.AlterField(
            model_name='contestparticipation',
            name='score',
            field=models.FloatField(db_index=True, default=0, verbose_name='score'),
        ),
        migrations.AlterField(
            model_name='contestparticipation',
            name='virtual',
            field=models.IntegerField(default=0, help_text='0 means non-virtual, otherwise the n-th virtual participation.', verbose_name='virtual participation id'),
        ),
        migrations.AlterField(
            model_name='contestproblem',
            name='max_submissions',
            field=models.IntegerField(blank=True, default=None, help_text='Maximum number of submissions for this problem, or leave blank for no limit.', null=True, validators=[judge.models.contest.MinValueOrNoneValidator(1, "Why include a problem you can't submit to?")]),
        ),
        migrations.AlterField(
            model_name='contestproblem',
            name='output_prefix_override',
            field=models.IntegerField(blank=True, default=0, null=True, verbose_name='output prefix length override'),
        ),
        migrations.AlterField(
            model_name='judge',
            name='auth_key',
            field=models.CharField(help_text='A key to authenticate this judge', max_length=100, verbose_name='authentication key'),
        ),
        migrations.AlterField(
            model_name='language',
            name='description',
            field=models.TextField(blank=True, help_text='Use this field to inform users of quirks with your environment, additional restrictions, etc.', verbose_name='language description'),
        ),
        migrations.AlterField(
            model_name='language',
            name='key',
            field=models.CharField(help_text='The identifier for this language; the same as its executor id for judges.', max_length=10, unique=True, verbose_name='short identifier'),
        ),
        migrations.AlterField(
            model_name='languagelimit',
            name='memory_limit',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1048576)], verbose_name='memory limit'),
        ),
        migrations.AlterField(
            model_name='languagelimit',
            name='time_limit',
            field=models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)], verbose_name='time limit'),
        ),
        migrations.AlterField(
            model_name='navigationbar',
            name='level',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AlterField(
            model_name='navigationbar',
            name='lft',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AlterField(
            model_name='navigationbar',
            name='rght',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AlterField(
            model_name='organization',
            name='about',
            field=models.TextField(db_collation='utf8mb4_unicode_ci', verbose_name='organization description'),
        ),
        migrations.AlterField(
            model_name='organizationrequest',
            name='state',
            field=models.CharField(choices=[('P', 'Pending'), ('A', 'Approved'), ('R', 'Rejected'), ('L', 'Leaved'), ('K', 'Kicked')], max_length=1, verbose_name='state'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='allowed_languages',
            field=models.ManyToManyField(help_text='List of allowed submission languages.', to='judge.language', verbose_name='allowed languages'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='authors',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to edit the problem, and be listed as authors.', related_name='authored_problems', to='judge.profile', verbose_name='creators'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='code',
            field=models.CharField(help_text='A short, unique code for the problem, used in the url after /problem/', max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[a-z0-9]+$', 'Problem code must be ^[a-z0-9]+$')], verbose_name='problem code'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='curators',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to edit the problem, but not be listed as authors.', related_name='curated_problems', to='judge.profile', verbose_name='curators'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='date',
            field=models.DateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, help_text="Doesn't have magic ability to auto-publish due to backward compatibility", null=True, verbose_name='date of publishing'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='description',
            field=models.TextField(validators=[judge.models.problem.disallowed_characters_validator], verbose_name='problem body'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='group',
            field=models.ForeignKey(help_text='The group of problem, shown under Category in the problem list.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='judge.problemgroup', verbose_name='problem group'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='is_manually_managed',
            field=models.BooleanField(db_index=True, default=False, help_text='Whether judges should be allowed to manage data or not.', verbose_name='manually managed'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='license',
            field=models.ForeignKey(blank=True, help_text='The license under which this problem is published.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='judge.license'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='memory_limit',
            field=models.PositiveIntegerField(default=256000, help_text='The memory limit for this problem, in kilobytes (e.g. 64mb = 65536 kilobytes).', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1048576)], verbose_name='memory limit'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='name',
            field=models.CharField(db_index=True, help_text='The full name of the problem, as shown in the problem list.', max_length=100, verbose_name='problem name'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='points',
            field=models.FloatField(default=100, help_text="Points awarded for problem completion. Points are displayed with a 'p' suffix if partial.", validators=[django.core.validators.MinValueValidator(0)], verbose_name='points'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='testers',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to view the private problem, but not edit it.', related_name='tested_problems', to='judge.profile', verbose_name='testers'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='time_limit',
            field=models.FloatField(default=1.0, help_text='The time limit for this problem, in seconds. Fractional seconds (e.g. 1.5) are supported.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)], verbose_name='time limit'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='types',
            field=models.ManyToManyField(help_text="The type of problem, as shown on the problem's page.", to='judge.problemtype', verbose_name='problem types'),
        ),
        migrations.AlterField(
            model_name='problemdata',
            name='checker',
            field=models.CharField(blank=True, choices=[('standard', 'Standard'), ('bridged', 'Custom checker'), ('floats', 'Floats'), ('floatsabs', 'Floats (absolute)'), ('floatsrel', 'Floats (relative)'), ('rstripped', 'Non-trailing spaces'), ('sorted', 'Unordered'), ('identical', 'Byte identical'), ('linecount', 'Line-by-line')], max_length=10, verbose_name='checker'),
        ),
        migrations.AlterField(
            model_name='problemtestcase',
            name='checker',
            field=models.CharField(blank=True, choices=[('standard', 'Standard'), ('bridged', 'Custom checker'), ('floats', 'Floats'), ('floatsabs', 'Floats (absolute)'), ('floatsrel', 'Floats (relative)'), ('rstripped', 'Non-trailing spaces'), ('sorted', 'Unordered'), ('identical', 'Byte identical'), ('linecount', 'Line-by-line')], max_length=10, verbose_name='checker'),
        ),
        migrations.AlterField(
            model_name='problemtranslation',
            name='language',
            field=models.CharField(choices=[('en', 'English'), ('vi', 'Vietnamese')], max_length=7, verbose_name='language'),
        ),
        migrations.AlterField(
            model_name='problemtype',
            name='full_name',
            field=models.CharField(max_length=100, verbose_name='problem type name'),
        ),
        migrations.AlterField(
            model_name='problemtype',
            name='name',
            field=models.CharField(max_length=20, unique=True, verbose_name='problem type ID'),
        ),
        migrations.AlterField(
            model_name='profile',
            name='about',
            field=models.TextField(blank=True, db_collation='utf8mb4_unicode_ci', null=True, verbose_name='self-description'),
        ),
        migrations.AlterField(
            model_name='profile',
            name='language',
            field=models.ForeignKey(default=judge.models.runtime.Language.get_default_language_pk, on_delete=django.db.models.deletion.SET_DEFAULT, to='judge.language', verbose_name='preferred language'),
        ),
        migrations.AlterField(
            model_name='profile',
            name='organizations',
            field=models.ManyToManyField(blank=True, related_name='members', related_query_name='member', to='judge.organization', verbose_name='organization'),
        ),
        migrations.AlterField(
            model_name='profile',
            name='timezone',
            field=models.CharField(choices=[('Africa', [('Africa/Abidjan', 'Abidjan'), ('Africa/Accra', 'Accra'), ('Africa/Addis_Ababa', 'Addis_Ababa'), ('Africa/Algiers', 'Algiers'), ('Africa/Asmara', 'Asmara'), ('Africa/Asmera', 'Asmera'), ('Africa/Bamako', 'Bamako'), ('Africa/Bangui', 'Bangui'), ('Africa/Banjul', 'Banjul'), ('Africa/Bissau', 'Bissau'), ('Africa/Blantyre', 'Blantyre'), ('Africa/Brazzaville', 'Brazzaville'), ('Africa/Bujumbura', 'Bujumbura'), ('Africa/Cairo', 'Cairo'), ('Africa/Casablanca', 'Casablanca'), ('Africa/Ceuta', 'Ceuta'), ('Africa/Conakry', 'Conakry'), ('Africa/Dakar', 'Dakar'), ('Africa/Dar_es_Salaam', 'Dar_es_Salaam'), ('Africa/Djibouti', 'Djibouti'), ('Africa/Douala', 'Douala'), ('Africa/El_Aaiun', 'El_Aaiun'), ('Africa/Freetown', 'Freetown'), ('Africa/Gaborone', 'Gaborone'), ('Africa/Harare', 'Harare'), ('Africa/Johannesburg', 'Johannesburg'), ('Africa/Juba', 'Juba'), ('Africa/Kampala', 'Kampala'), ('Africa/Khartoum', 'Khartoum'), ('Africa/Kigali', 'Kigali'), ('Africa/Kinshasa', 'Kinshasa'), ('Africa/Lagos', 'Lagos'), ('Africa/Libreville', 'Libreville'), ('Africa/Lome', 'Lome'), ('Africa/Luanda', 'Luanda'), ('Africa/Lubumbashi', 'Lubumbashi'), ('Africa/Lusaka', 'Lusaka'), ('Africa/Malabo', 'Malabo'), ('Africa/Maputo', 'Maputo'), ('Africa/Maseru', 'Maseru'), ('Africa/Mbabane', 'Mbabane'), ('Africa/Mogadishu', 'Mogadishu'), ('Africa/Monrovia', 'Monrovia'), ('Africa/Nairobi', 'Nairobi'), ('Africa/Ndjamena', 'Ndjamena'), ('Africa/Niamey', 'Niamey'), ('Africa/Nouakchott', 'Nouakchott'), ('Africa/Ouagadougou', 'Ouagadougou'), ('Africa/Porto-Novo', 'Porto-Novo'), ('Africa/Sao_Tome', 'Sao_Tome'), ('Africa/Timbuktu', 'Timbuktu'), ('Africa/Tripoli', 'Tripoli'), ('Africa/Tunis', 'Tunis'), ('Africa/Windhoek', 'Windhoek')]), ('America', [('America/Adak', 'Adak'), ('America/Anchorage', 'Anchorage'), ('America/Anguilla', 'Anguilla'), ('America/Antigua', 'Antigua'), ('America/Araguaina', 'Araguaina'), ('America/Argentina/Buenos_Aires', 'Argentina/Buenos_Aires'), ('America/Argentina/Catamarca', 'Argentina/Catamarca'), ('America/Argentina/ComodRivadavia', 'Argentina/ComodRivadavia'), ('America/Argentina/Cordoba', 'Argentina/Cordoba'), ('America/Argentina/Jujuy', 'Argentina/Jujuy'), ('America/Argentina/La_Rioja', 'Argentina/La_Rioja'), ('America/Argentina/Mendoza', 'Argentina/Mendoza'), ('America/Argentina/Rio_Gallegos', 'Argentina/Rio_Gallegos'), ('America/Argentina/Salta', 'Argentina/Salta'), ('America/Argentina/San_Juan', 'Argentina/San_Juan'), ('America/Argentina/San_Luis', 'Argentina/San_Luis'), ('America/Argentina/Tucuman', 'Argentina/Tucuman'), ('America/Argentina/Ushuaia', 'Argentina/Ushuaia'), ('America/Aruba', 'Aruba'), ('America/Asuncion', 'Asuncion'), ('America/Atikokan', 'Atikokan'), ('America/Atka', 'Atka'), ('America/Bahia', 'Bahia'), ('America/Bahia_Banderas', 'Bahia_Banderas'), ('America/Barbados', 'Barbados'), ('America/Belem', 'Belem'), ('America/Belize', 'Belize'), ('America/Blanc-Sablon', 'Blanc-Sablon'), ('America/Boa_Vista', 'Boa_Vista'), ('America/Bogota', 'Bogota'), ('America/Boise', 'Boise'), ('America/Buenos_Aires', 'Buenos_Aires'), ('America/Cambridge_Bay', 'Cambridge_Bay'), ('America/Campo_Grande', 'Campo_Grande'), ('America/Cancun', 'Cancun'), ('America/Caracas', 'Caracas'), ('America/Catamarca', 'Catamarca'), ('America/Cayenne', 'Cayenne'), ('America/Cayman', 'Cayman'), ('America/Chicago', 'Chicago'), ('America/Chihuahua', 'Chihuahua'), ('America/Ciudad_Juarez', 'Ciudad_Juarez'), ('America/Coral_Harbour', 'Coral_Harbour'), ('America/Cordoba', 'Cordoba'), ('America/Costa_Rica', 'Costa_Rica'), ('America/Coyhaique', 'Coyhaique'), ('America/Creston', 'Creston'), ('America/Cuiaba', 'Cuiaba'), ('America/Curacao', 'Curacao'), ('America/Danmarkshavn', 'Danmarkshavn'), ('America/Dawson', 'Dawson'), ('America/Dawson_Creek', 'Dawson_Creek'), ('America/Denver', 'Denver'), ('America/Detroit', 'Detroit'), ('America/Dominica', 'Dominica'), ('America/Edmonton', 'Edmonton'), ('America/Eirunepe', 'Eirunepe'), ('America/El_Salvador', 'El_Salvador'), ('America/Ensenada', 'Ensenada'), ('America/Fort_Nelson', 'Fort_Nelson'), ('America/Fort_Wayne', 'Fort_Wayne'), ('America/Fortaleza', 'Fortaleza'), ('America/Glace_Bay', 'Glace_Bay'), ('America/Godthab', 'Godthab'), ('America/Goose_Bay', 'Goose_Bay'), ('America/Grand_Turk', 'Grand_Turk'), ('America/Grenada', 'Grenada'), ('America/Guadeloupe', 'Guadeloupe'), ('America/Guatemala', 'Guatemala'), ('America/Guayaquil', 'Guayaquil'), ('America/Guyana', 'Guyana'), ('America/Halifax', 'Halifax'), ('America/Havana', 'Havana'), ('America/Hermosillo', 'Hermosillo'), ('America/Indiana/Indianapolis', 'Indiana/Indianapolis'), ('America/Indiana/Knox', 'Indiana/Knox'), ('America/Indiana/Marengo', 'Indiana/Marengo'), ('America/Indiana/Petersburg', 'Indiana/Petersburg'), ('America/Indiana/Tell_City', 'Indiana/Tell_City'), ('America/Indiana/Vevay', 'Indiana/Vevay'), ('America/Indiana/Vincennes', 'Indiana/Vincennes'), ('America/Indiana/Winamac', 'Indiana/Winamac'), ('America/Indianapolis', 'Indianapolis'), ('America/Inuvik', 'Inuvik'), ('America/Iqaluit', 'Iqaluit'), ('America/Jamaica', 'Jamaica'), ('America/Jujuy', 'Jujuy'), ('America/Juneau', 'Juneau'), ('America/Kentucky/Louisville', 'Kentucky/Louisville'), ('America/Kentucky/Monticello', 'Kentucky/Monticello'), ('America/Knox_IN', 'Knox_IN'), ('America/Kralendijk', 'Kralendijk'), ('America/La_Paz', 'La_Paz'), ('America/Lima', 'Lima'), ('America/Los_Angeles', 'Los_Angeles'), ('America/Louisville', 'Louisville'), ('America/Lower_Princes', 'Lower_Princes'), ('America/Maceio', 'Maceio'), ('America/Managua', 'Managua'), ('America/Manaus', 'Manaus'), ('America/Marigot', 'Marigot'), ('America/Martinique', 'Martinique'), ('America/Matamoros', 'Matamoros'), ('America/Mazatlan', 'Mazatlan'), ('America/Mendoza', 'Mendoza'), ('America/Menominee', 'Menominee'), ('America/Merida', 'Merida'), ('America/Metlakatla', 'Metlakatla'), ('America/Mexico_City', 'Mexico_City'), ('America/Miquelon', 'Miquelon'), ('America/Moncton', 'Moncton'), ('America/Monterrey', 'Monterrey'), ('America/Montevideo', 'Montevideo'), ('America/Montreal', 'Montreal'), ('America/Montserrat', 'Montserrat'), ('America/Nassau', 'Nassau'), ('America/New_York', 'New_York'), ('America/Nipigon', 'Nipigon'), ('America/Nome', 'Nome'), ('America/Noronha', 'Noronha'), ('America/North_Dakota/Beulah', 'North_Dakota/Beulah'), ('America/North_Dakota/Center', 'North_Dakota/Center'), ('America/North_Dakota/New_Salem', 'North_Dakota/New_Salem'), ('America/Nuuk', 'Nuuk'), ('America/Ojinaga', 'Ojinaga'), ('America/Panama', 'Panama'), ('America/Pangnirtung', 'Pangnirtung'), ('America/Paramaribo', 'Paramaribo'), ('America/Phoenix', 'Phoenix'), ('America/Port-au-Prince', 'Port-au-Prince'), ('America/Port_of_Spain', 'Port_of_Spain'), ('America/Porto_Acre', 'Porto_Acre'), ('America/Porto_Velho', 'Porto_Velho'), ('America/Puerto_Rico', 'Puerto_Rico'), ('America/Punta_Arenas', 'Punta_Arenas'), ('America/Rainy_River', 'Rainy_River'), ('America/Rankin_Inlet', 'Rankin_Inlet'), ('America/Recife', 'Recife'), ('America/Regina', 'Regina'), ('America/Resolute', 'Resolute'), ('America/Rio_Branco', 'Rio_Branco'), ('America/Rosario', 'Rosario'), ('America/Santa_Isabel', 'Santa_Isabel'), ('America/Santarem', 'Santarem'), ('America/Santiago', 'Santiago'), ('America/Santo_Domingo', 'Santo_Domingo'), ('America/Sao_Paulo', 'Sao_Paulo'), ('America/Scoresbysund', 'Scoresbysund'), ('America/Shiprock', 'Shiprock'), ('America/Sitka', 'Sitka'), ('America/St_Barthelemy', 'St_Barthelemy'), ('America/St_Johns', 'St_Johns'), ('America/St_Kitts', 'St_Kitts'), ('America/St_Lucia', 'St_Lucia'), ('America/St_Thomas', 'St_Thomas'), ('America/St_Vincent', 'St_Vincent'), ('America/Swift_Current', 'Swift_Current'), ('America/Tegucigalpa', 'Tegucigalpa'), ('America/Thule', 'Thule'), ('America/Thunder_Bay', 'Thunder_Bay'), ('America/Tijuana', 'Tijuana'), ('America/Toronto', 'Toronto'), ('America/Tortola', 'Tortola'), ('America/Vancouver', 'Vancouver'), ('America/Virgin', 'Virgin'), ('America/Whitehorse', 'Whitehorse'), ('America/Winnipeg', 'Winnipeg'), ('America/Yakutat', 'Yakutat'), ('America/Yellowknife', 'Yellowknife')]), ('Antarctica', [('Antarctica/Casey', 'Casey'), ('Antarctica/Davis', 'Davis'), ('Antarctica/DumontDUrville', 'DumontDUrville'), ('Antarctica/Macquarie', 'Macquarie'), ('Antarctica/Mawson', 'Mawson'), ('Antarctica/McMurdo', 'McMurdo'), ('Antarctica/Palmer', 'Palmer'), ('Antarctica/Rothera', 'Rothera'), ('Antarctica/South_Pole', 'South_Pole'), ('Antarctica/Syowa', 'Syowa'), ('Antarctica/Troll', 'Troll'), ('Antarctica/Vostok', 'Vostok')]), ('Arctic', [('Arctic/Longyearbyen', 'Longyearbyen')]), ('Asia', [('Asia/Aden', 'Aden'), ('Asia/Almaty', 'Almaty'), ('Asia/Amman', 'Amman'), ('Asia/Anadyr', 'Anadyr'), ('Asia/Aqtau', 'Aqtau'), ('Asia/Aqtobe', 'Aqtobe'), ('Asia/Ashgabat', 'Ashgabat'), ('Asia/Ashkhabad', 'Ashkhabad'), ('Asia/Atyrau', 'Atyrau'), ('Asia/Baghdad', 'Baghdad'), ('Asia/Bahrain', 'Bahrain'), ('Asia/Baku', 'Baku'), ('Asia/Bangkok', 'Bangkok'), ('Asia/Barnaul', 'Barnaul'), ('Asia/Beirut', 'Beirut'), ('Asia/Bishkek', 'Bishkek'), ('Asia/Brunei', 'Brunei'), ('Asia/Calcutta', 'Calcutta'), ('Asia/Chita', 'Chita'), ('Asia/Choibalsan', 'Choibalsan'), ('Asia/Chongqing', 'Chongqing'), ('Asia/Chungking', 'Chungking'), ('Asia/Colombo', 'Colombo'), ('Asia/Dacca', 'Dacca'), ('Asia/Damascus', 'Damascus'), ('Asia/Dhaka', 'Dhaka'), ('Asia/Dili', 'Dili'), ('Asia/Dubai', 'Dubai'), ('Asia/Dushanbe', 'Dushanbe'), ('Asia/Famagusta', 'Famagusta'), ('Asia/Gaza', 'Gaza'), ('Asia/Harbin', 'Harbin'), ('Asia/Hebron', 'Hebron'), ('Asia/Ho_Chi_Minh', 'Ho_Chi_Minh'), ('Asia/Hong_Kong', 'Hong_Kong'), ('Asia/Hovd', 'Hovd'), ('Asia/Irkutsk', 'Irkutsk'), ('Asia/Istanbul', 'Istanbul'), ('Asia/Jakarta', 'Jakarta'), ('Asia/Jayapura', 'Jayapura'), ('Asia/Jerusalem', 'Jerusalem'), ('Asia/Kabul', 'Kabul'), ('Asia/Kamchatka', 'Kamchatka'), ('Asia/Karachi', 'Karachi'), ('Asia/Kashgar', 'Kashgar'), ('Asia/Kathmandu', 'Kathmandu'), ('Asia/Katmandu', 'Katmandu'), ('Asia/Khandyga', 'Khandyga'), ('Asia/Kolkata', 'Kolkata'), ('Asia/Krasnoyarsk', 'Krasnoyarsk'), ('Asia/Kuala_Lumpur', 'Kuala_Lumpur'), ('Asia/Kuching', 'Kuching'), ('Asia/Kuwait', 'Kuwait'), ('Asia/Macao', 'Macao'), ('Asia/Macau', 'Macau'), ('Asia/Magadan', 'Magadan'), ('Asia/Makassar', 'Makassar'), ('Asia/Manila', 'Manila'), ('Asia/Muscat', 'Muscat'), ('Asia/Nicosia', 'Nicosia'), ('Asia/Novokuznetsk', 'Novokuznetsk'), ('Asia/Novosibirsk', 'Novosibirsk'), ('Asia/Omsk', 'Omsk'), ('Asia/Oral', 'Oral'), ('Asia/Phnom_Penh', 'Phnom_Penh'), ('Asia/Pontianak', 'Pontianak'), ('Asia/Pyongyang', 'Pyongyang'), ('Asia/Qatar', 'Qatar'), ('Asia/Qostanay', 'Qostanay'), ('Asia/Qyzylorda', 'Qyzylorda'), ('Asia/Rangoon', 'Rangoon'), ('Asia/Riyadh', 'Riyadh'), ('Asia/Saigon', 'Saigon'), ('Asia/Sakhalin', 'Sakhalin'), ('Asia/Samarkand', 'Samarkand'), ('Asia/Seoul', 'Seoul'), ('Asia/Shanghai', 'Shanghai'), ('Asia/Singapore', 'Singapore'), ('Asia/Srednekolymsk', 'Srednekolymsk'), ('Asia/Taipei', 'Taipei'), ('Asia/Tashkent', 'Tashkent'), ('Asia/Tbilisi', 'Tbilisi'), ('Asia/Tehran', 'Tehran'), ('Asia/Tel_Aviv', 'Tel_Aviv'), ('Asia/Thimbu', 'Thimbu'), ('Asia/Thimphu', 'Thimphu'), ('Asia/Tokyo', 'Tokyo'), ('Asia/Tomsk', 'Tomsk'), ('Asia/Ujung_Pandang', 'Ujung_Pandang'), ('Asia/Ulaanbaatar', 'Ulaanbaatar'), ('Asia/Ulan_Bator', 'Ulan_Bator'), ('Asia/Urumqi', 'Urumqi'), ('Asia/Ust-Nera', 'Ust-Nera'), ('Asia/Vientiane', 'Vientiane'), ('Asia/Vladivostok', 'Vladivostok'), ('Asia/Yakutsk', 'Yakutsk'), ('Asia/Yangon', 'Yangon'), ('Asia/Yekaterinburg', 'Yekaterinburg'), ('Asia/Yerevan', 'Yerevan')]), ('Atlantic', [('Atlantic/Azores', 'Azores'), ('Atlantic/Bermuda', 'Bermuda'), ('Atlantic/Canary', 'Canary'), ('Atlantic/Cape_Verde', 'Cape_Verde'), ('Atlantic/Faeroe', 'Faeroe'), ('Atlantic/Faroe', 'Faroe'), ('Atlantic/Jan_Mayen', 'Jan_Mayen'), ('Atlantic/Madeira', 'Madeira'), ('Atlantic/Reykjavik', 'Reykjavik'), ('Atlantic/South_Georgia', 'South_Georgia'), ('Atlantic/St_Helena', 'St_Helena'), ('Atlantic/Stanley', 'Stanley')]), ('Australia', [('Australia/ACT', 'ACT'), ('Australia/Adelaide', 'Adelaide'), ('Australia/Brisbane', 'Brisbane'), ('Australia/Broken_Hill', 'Broken_Hill'), ('Australia/Canberra', 'Canberra'), ('Australia/Currie', 'Currie'), ('Australia/Darwin', 'Darwin'), ('Australia/Eucla', 'Eucla'), ('Australia/Hobart', 'Hobart'), ('Australia/LHI', 'LHI'), ('Australia/Lindeman', 'Lindeman'), ('Australia/Lord_Howe', 'Lord_Howe'), ('Australia/Melbourne', 'Melbourne'), ('Australia/NSW', 'NSW'), ('Australia/North', 'North'), ('Australia/Perth', 'Perth'), ('Australia/Queensland', 'Queensland'), ('Australia/South', 'South'), ('Australia/Sydney', 'Sydney'), ('Australia/Tasmania', 'Tasmania'), ('Australia/Victoria', 'Victoria'), ('Australia/West', 'West'), ('Australia/Yancowinna', 'Yancowinna')]), ('Brazil', [('Brazil/Acre', 'Acre'), ('Brazil/DeNoronha', 'DeNoronha'), ('Brazil/East', 'East'), ('Brazil/West', 'West')]), ('Canada', [('Canada/Atlantic', 'Atlantic'), ('Canada/Central', 'Central'), ('Canada/Eastern', 'Eastern'), ('Canada/Mountain', 'Mountain'), ('Canada/Newfoundland', 'Newfoundland'), ('Canada/Pacific', 'Pacific'), ('Canada/Saskatchewan', 'Saskatchewan'), ('Canada/Yukon', 'Yukon')]), ('Chile', [('Chile/Continental', 'Continental'), ('Chile/EasterIsland', 'EasterIsland')]), ('Etc', [('Etc/Greenwich', 'Greenwich'), ('Etc/UCT', 'UCT'), ('Etc/UTC', 'UTC'), ('Etc/Universal', 'Universal'), ('Etc/Zulu', 'Zulu')]), ('Europe', [('Europe/Amsterdam', 'Amsterdam'), ('Europe/Andorra', 'Andorra'), ('Europe/Astrakhan', 'Astrakhan'), ('Europe/Athens', 'Athens'), ('Europe/Belfast', 'Belfast'), ('Europe/Belgrade', 'Belgrade'), ('Europe/Berlin', 'Berlin'), ('Europe/Bratislava', 'Bratislava'), ('Europe/Brussels', 'Brussels'), ('Europe/Bucharest', 'Bucharest'), ('Europe/Budapest', 'Budapest'), ('Europe/Busingen', 'Busingen'), ('Europe/Chisinau', 'Chisinau'), ('Europe/Copenhagen', 'Copenhagen'), ('Europe/Dublin', 'Dublin'), ('Europe/Gibraltar', 'Gibraltar'), ('Europe/Guernsey', 'Guernsey'), ('Europe/Helsinki', 'Helsinki'), ('Europe/Isle_of_Man', 'Isle_of_Man'), ('Europe/Istanbul', 'Istanbul'), ('Europe/Jersey', 'Jersey'), ('Europe/Kaliningrad', 'Kaliningrad'), ('Europe/Kiev', 'Kiev'), ('Europe/Kirov', 'Kirov'), ('Europe/Kyiv', 'Kyiv'), ('Europe/Lisbon', 'Lisbon'), ('Europe/Ljubljana', 'Ljubljana'), ('Europe/London', 'London'), ('Europe/Luxembourg', 'Luxembourg'), ('Europe/Madrid', 'Madrid'), ('Europe/Malta', 'Malta'), ('Europe/Mariehamn', 'Mariehamn'), ('Europe/Minsk', 'Minsk'), ('Europe/Monaco', 'Monaco'), ('Europe/Moscow', 'Moscow'), ('Europe/Nicosia', 'Nicosia'), ('Europe/Oslo', 'Oslo'), ('Europe/Paris', 'Paris'), ('Europe/Podgorica', 'Podgorica'), ('Europe/Prague', 'Prague'), ('Europe/Riga', 'Riga'), ('Europe/Rome', 'Rome'), ('Europe/Samara', 'Samara'), ('Europe/San_Marino', 'San_Marino'), ('Europe/Sarajevo', 'Sarajevo'), ('Europe/Saratov', 'Saratov'), ('Europe/Simferopol', 'Simferopol'), ('Europe/Skopje', 'Skopje'), ('Europe/Sofia', 'Sofia'), ('Europe/Stockholm', 'Stockholm'), ('Europe/Tallinn', 'Tallinn'), ('Europe/Tirane', 'Tirane'), ('Europe/Tiraspol', 'Tiraspol'), ('Europe/Ulyanovsk', 'Ulyanovsk'), ('Europe/Uzhgorod', 'Uzhgorod'), ('Europe/Vaduz', 'Vaduz'), ('Europe/Vatican', 'Vatican'), ('Europe/Vienna', 'Vienna'), ('Europe/Vilnius', 'Vilnius'), ('Europe/Volgograd', 'Volgograd'), ('Europe/Warsaw', 'Warsaw'), ('Europe/Zagreb', 'Zagreb'), ('Europe/Zaporozhye', 'Zaporozhye'), ('Europe/Zurich', 'Zurich')]), ('Indian', [('Indian/Antananarivo', 'Antananarivo'), ('Indian/Chagos', 'Chagos'), ('Indian/Christmas', 'Christmas'), ('Indian/Cocos', 'Cocos'), ('Indian/Comoro', 'Comoro'), ('Indian/Kerguelen', 'Kerguelen'), ('Indian/Mahe', 'Mahe'), ('Indian/Maldives', 'Maldives'), ('Indian/Mauritius', 'Mauritius'), ('Indian/Mayotte', 'Mayotte'), ('Indian/Reunion', 'Reunion')]), ('Mexico', [('Mexico/BajaNorte', 'BajaNorte'), ('Mexico/BajaSur', 'BajaSur'), ('Mexico/General', 'General')]), ('Other', [('CET', 'CET'), ('CST6CDT', 'CST6CDT'), ('Cuba', 'Cuba'), ('EET', 'EET'), ('EST', 'EST'), ('EST5EDT', 'EST5EDT'), ('Egypt', 'Egypt'), ('Eire', 'Eire'), ('GB', 'GB'), ('GB-Eire', 'GB-Eire'), ('Greenwich', 'Greenwich'), ('HST', 'HST'), ('Hongkong', 'Hongkong'), ('Iceland', 'Iceland'), ('Iran', 'Iran'), ('Israel', 'Israel'), ('Jamaica', 'Jamaica'), ('Japan', 'Japan'), ('Kwajalein', 'Kwajalein'), ('Libya', 'Libya'), ('MET', 'MET'), ('MST', 'MST'), ('MST7MDT', 'MST7MDT'), ('NZ', 'NZ'), ('NZ-CHAT', 'NZ-CHAT'), ('Navajo', 'Navajo'), ('PRC', 'PRC'), ('PST8PDT', 'PST8PDT'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('ROC', 'ROC'), ('ROK', 'ROK'), ('Singapore', 'Singapore'), ('Turkey', 'Turkey'), ('UCT', 'UCT'), ('UTC', 'UTC'), ('Universal', 'Universal'), ('W-SU', 'W-SU'), ('WET', 'WET'), ('Zulu', 'Zulu')]), ('Pacific', [('Pacific/Apia', 'Apia'), ('Pacific/Auckland', 'Auckland'), ('Pacific/Bougainville', 'Bougainville'), ('Pacific/Chatham', 'Chatham'), ('Pacific/Chuuk', 'Chuuk'), ('Pacific/Easter', 'Easter'), ('Pacific/Efate', 'Efate'), ('Pacific/Enderbury', 'Enderbury'), ('Pacific/Fakaofo', 'Fakaofo'), ('Pacific/Fiji', 'Fiji'), ('Pacific/Funafuti', 'Funafuti'), ('Pacific/Galapagos', 'Galapagos'), ('Pacific/Gambier', 'Gambier'), ('Pacific/Guadalcanal', 'Guadalcanal'), ('Pacific/Guam', 'Guam'), ('Pacific/Honolulu', 'Honolulu'), ('Pacific/Johnston', 'Johnston'), ('Pacific/Kanton', 'Kanton'), ('Pacific/Kiritimati', 'Kiritimati'), ('Pacific/Kosrae', 'Kosrae'), ('Pacific/Kwajalein', 'Kwajalein'), ('Pacific/Majuro', 'Majuro'), ('Pacific/Marquesas', 'Marquesas'), ('Pacific/Midway', 'Midway'), ('Pacific/Nauru', 'Nauru'), ('Pacific/Niue', 'Niue'), ('Pacific/Norfolk', 'Norfolk'), ('Pacific/Noumea', 'Noumea'), ('Pacific/Pago_Pago', 'Pago_Pago'), ('Pacific/Palau', 'Palau'), ('Pacific/Pitcairn', 'Pitcairn'), ('Pacific/Pohnpei', 'Pohnpei'), ('Pacific/Ponape', 'Ponape'), ('Pacific/Port_Moresby', 'Port_Moresby'), ('Pacific/Rarotonga', 'Rarotonga'), ('Pacific/Saipan', 'Saipan'), ('Pacific/Samoa', 'Samoa'), ('Pacific/Tahiti', 'Tahiti'), ('Pacific/Tarawa', 'Tarawa'), ('Pacific/Tongatapu', 'Tongatapu'), ('Pacific/Truk', 'Truk'), ('Pacific/Wake', 'Wake'), ('Pacific/Wallis', 'Wallis'), ('Pacific/Yap', 'Yap')]), ('US', [('US/Alaska', 'Alaska'), ('US/Aleutian', 'Aleutian'), ('US/Arizona', 'Arizona'), ('US/Central', 'Central'), ('US/East-Indiana', 'East-Indiana'), ('US/Eastern', 'Eastern'), ('US/Hawaii', 'Hawaii'), ('US/Indiana-Starke', 'Indiana-Starke'), ('US/Michigan', 'Michigan'), ('US/Mountain', 'Mountain'), ('US/Pacific', 'Pacific'), ('US/Samoa', 'Samoa')])], default='Asia/Ho_Chi_Minh', max_length=50, verbose_name='location'),
        ),
        migrations.AlterField(
            model_name='ticket',
            name='assignees',
            field=models.ManyToManyField(blank=True, related_name='assigned_tickets', to='judge.profile', verbose_name='assignees'),
        ),
        migrations.AlterUniqueTogether(
            name='submissiontestcase',
            unique_together={('submission', 'case')},
        ),
        migrations.DeleteModel(
            name='PrivateMessage',
        ),
        migrations.DeleteModel(
            name='PrivateMessageThread',
        ),
        migrations.AddField(
            model_name='webauthncredential',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webauthn_credentials', to='judge.profile', verbose_name='user'),
        ),
        migrations.AddField(
            model_name='submissionsource',
            name='submission',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='source', to='judge.submission', verbose_name='associated submission'),
        ),
        migrations.AddField(
            model_name='solutionvote',
            name='voter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voted_solutions', to='judge.profile'),
        ),
        migrations.AddField(
            model_name='samplecontestproblem',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samplecontests', to='judge.problem', verbose_name='problem'),
        ),
        migrations.AddField(
            model_name='samplecontest',
            name='problems',
            field=models.ManyToManyField(to='judge.problem', verbose_name='problems'),
        ),
        migrations.AddField(
            model_name='samplecontest',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='samplecontests', to='judge.contesttag', verbose_name='contest tags'),
        ),
        migrations.AddField(
            model_name='publicsolution',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.profile', verbose_name='user'),
        ),
        migrations.AddField(
            model_name='publicsolution',
            name='contest',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='judge.contest', verbose_name='contest'),
        ),
        migrations.AddField(
            model_name='publicsolution',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.problem', verbose_name='problem'),
        ),
        migrations.AddField(
            model_name='publicproblem',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curriculums', to='judge.problem', verbose_name='problem'),
        ),
        migrations.AddField(
            model_name='logdownloadtestcase',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.problem', verbose_name='problem'),
        ),
        migrations.AddField(
            model_name='logdownloadtestcase',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.profile', verbose_name='user'),
        ),
        migrations.AddField(
            model_name='log',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.profile', verbose_name='user'),
        ),
        migrations.AddField(
            model_name='curriculumcontest',
            name='contest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curriculums', to='judge.contest', verbose_name='contest'),
        ),
        migrations.AddField(
            model_name='curriculumcontest',
            name='curriculum',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curriculum_contests', to='judge.curriculum', verbose_name='curriculum'),
        ),
        migrations.AddField(
            model_name='curriculum',
            name='contests',
            field=models.ManyToManyField(blank=True, help_text='Contests in the curriculum', through='judge.CurriculumContest', to='judge.contest', verbose_name='contests'),
        ),
        migrations.AddField(
            model_name='curriculum',
            name='problems',
            field=models.ManyToManyField(blank=True, help_text='Problems in the curriculum', through='judge.PublicProblem', to='judge.problem', verbose_name='problems'),
        ),
        migrations.AddField(
            model_name='contestmoss',
            name='contest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moss', to='judge.contest', verbose_name='contest'),
        ),
        migrations.AddField(
            model_name='contestmoss',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moss', to='judge.problem', verbose_name='problem'),
        ),
        migrations.AddField(
            model_name='organization',
            name='year',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='judge.schoolyear', verbose_name='school year'),
        ),
        migrations.AddField(
            model_name='problem',
            name='classes',
            field=models.ForeignKey(help_text='The class of problem, shown under Class in the problem list.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='judge.problemclass', verbose_name='problem class'),
        ),
        migrations.AlterUniqueTogether(
            name='solutionvote',
            unique_together={('voter', 'solution')},
        ),
        migrations.AlterUniqueTogether(
            name='samplecontestproblem',
            unique_together={('problem', 'contest')},
        ),
        migrations.AlterUniqueTogether(
            name='publicproblem',
            unique_together={('curriculum', 'problem')},
        ),
        migrations.AlterUniqueTogether(
            name='curriculumcontest',
            unique_together={('curriculum', 'contest')},
        ),
        migrations.AlterUniqueTogether(
            name='contestmoss',
            unique_together={('contest', 'problem', 'language')},
        ),
    ]

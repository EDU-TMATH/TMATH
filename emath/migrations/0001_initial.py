# Generated by Django 2.2.24 on 2022-01-27 09:58

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields
import judge.models.contest
import judge.models.problem


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('judge', '0131_auto_20220127_0958'),
    ]

    operations = [
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[a-z0-9]+$', 'exam id must be ^[a-z0-9]+$')], verbose_name='exam id')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='exam name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('start_time', models.DateTimeField(db_index=True, verbose_name='start time')),
                ('end_time', models.DateTimeField(db_index=True, verbose_name='end time')),
                ('time_limit', models.DurationField(blank=True, null=True, verbose_name='time limit')),
                ('is_visible', models.BooleanField(default=False, help_text='Should be set even for organization-private exams, where it determines whether the exam is visible to members of the specified organizations.', verbose_name='publicly visible')),
                ('is_rated', models.BooleanField(default=False, help_text='Whether this exam can be rated.', verbose_name='exam rated')),
                ('scoreboard_visibility', models.CharField(choices=[('V', 'Visible'), ('C', 'Hidden for duration of exam'), ('P', 'Hidden for duration of participation')], default='V', help_text='Scoreboard visibility through the duration of the exam', max_length=1, verbose_name='scoreboard visibility')),
                ('use_clarifications', models.BooleanField(default=True, help_text='Use clarification system instead of comments.', verbose_name='no comments')),
                ('rating_floor', models.IntegerField(blank=True, help_text='Rating floor for exam', null=True, verbose_name='rating floor')),
                ('rating_ceiling', models.IntegerField(blank=True, help_text='Rating ceiling for exam', null=True, verbose_name='rating ceiling')),
                ('rate_all', models.BooleanField(default=False, help_text='Rate all users who joined.', verbose_name='rate all')),
                ('is_private', models.BooleanField(default=False, verbose_name='private to specific users')),
                ('hide_problem_tags', models.BooleanField(default=False, help_text='Whether problem tags should be hidden by default.', verbose_name='hide problem tags')),
                ('hide_problem_authors', models.BooleanField(default=False, help_text='Whether problem authors should be hidden by default.', verbose_name='hide problem authors')),
                ('run_pretests_only', models.BooleanField(default=False, help_text='Whether judges should grade pretests only, versus all testcases. Commonly set during a exam, then unset prior to rejudging user submissions when the exam ends.', verbose_name='run pretests only')),
                ('is_organization_private', models.BooleanField(default=False, verbose_name='private to organizations')),
                ('og_image', models.CharField(blank=True, default='', max_length=150, verbose_name='OpenGraph image')),
                ('logo_override_image', models.CharField(blank=True, default='', help_text='This image will replace the default site logo for users inside the exam.', max_length=150, verbose_name='Logo override image')),
                ('user_count', models.IntegerField(default=0, verbose_name='the amount of live participants')),
                ('summary', models.TextField(blank=True, help_text='Plain-text, shown in meta description tag, e.g. for social media.', verbose_name='exam summary')),
                ('access_code', models.CharField(blank=True, default='', help_text='An optional code to prompt examants before they are allowed to join the exam. Leave it blank to disable.', max_length=255, verbose_name='access code')),
                ('problem_label_script', models.TextField(blank=True, help_text='A custom Lua function to generate problem labels. Requires a single function with an integer parameter, the zero-indexed exam problem index, and returns a string, the label.', verbose_name='exam problem label script')),
                ('locked_after', models.DateTimeField(blank=True, help_text='Prevent submissions from this exam from being rejudged after this date.', null=True, verbose_name='exam lock')),
                ('points_precision', models.IntegerField(default=3, help_text='Number of digits to round points to.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='precision points')),
                ('max_submissions', models.IntegerField(blank=True, default=None, help_text='Maximum number of submissions for this exam, or leave blank for no limit.', null=True, validators=[judge.models.contest.MinValueOrNoneValidator(1, "Why include a exam you can't submit to?")])),
                ('authors', models.ManyToManyField(help_text='These users will be able to edit the exam.', related_name='_exam_authors_+', to='judge.Profile')),
                ('banned_users', models.ManyToManyField(blank=True, help_text='Bans the selected users from joining this exam.', to='judge.Profile', verbose_name='personae non gratae')),
                ('curators', models.ManyToManyField(blank=True, help_text='These users will be able to edit the exam, but will not be listed as authors.', related_name='_exam_curators_+', to='judge.Profile')),
            ],
            options={
                'verbose_name': 'exam',
                'verbose_name_plural': 'exams',
                'permissions': (('see_private_exam', 'See private exams'), ('edit_own_exam', 'Edit own exams'), ('edit_all_exam', 'Edit all exam'), ('clone_exam', 'Clone exam'), ('exam_rating', 'Rate exams'), ('create_private_exam', 'Create private exams'), ('change_exam_visibility', 'Change exam visibility'), ('exam_problem_label', 'Edit exam problem label script'), ('lock_exam', 'Change lock status of exam')),
            },
        ),
        migrations.CreateModel(
            name='MathGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='problem category ID')),
                ('full_name', models.CharField(max_length=100, verbose_name='problem category name')),
            ],
            options={
                'verbose_name': 'problem type',
                'verbose_name_plural': 'problem types',
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='organization title')),
                ('slug', models.SlugField(help_text='Organization name shown in URL', max_length=128, verbose_name='organization slug')),
                ('short_name', models.CharField(help_text='Displayed beside user name during contests', max_length=20, verbose_name='short name')),
                ('about', models.TextField(verbose_name='organization description')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('is_open', models.BooleanField(default=True, help_text='Allow joining organization', verbose_name='is open organization?')),
                ('slots', models.IntegerField(blank=True, help_text='Maximum amount of users in this organization, only applicable to private organizations', null=True, verbose_name='maximum size')),
                ('access_code', models.CharField(blank=True, help_text='Student access code', max_length=7, null=True, verbose_name='access code')),
                ('logo_override_image', models.CharField(blank=True, default='', help_text='This image will replace the default site logo for users viewing the organization.', max_length=150, verbose_name='Logo override image')),
                ('admins', models.ManyToManyField(help_text='Those who can edit this organization', related_name='admin_emath', to='judge.Profile', verbose_name='administrators')),
            ],
            options={
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
                'ordering': ['name'],
                'permissions': (('organization_emath_admin', 'Administer EMath organizations'), ('edit_all_emath_organization', 'Edit all EMath organizations')),
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='submission time')),
                ('time', models.FloatField(db_index=True, null=True, verbose_name='execution time')),
                ('points', models.FloatField(db_index=True, null=True, verbose_name='points granted')),
                ('result', models.CharField(blank=True, choices=[('AC', 'Accepted'), ('WA', 'Wrong Answer'), ('TLE', 'Time Limit Exceeded'), ('MLE', 'Memory Limit Exceeded'), ('OLE', 'Output Limit Exceeded'), ('IR', 'Invalid Return'), ('RTE', 'Runtime Error'), ('CE', 'Compile Error'), ('IE', 'Internal Error'), ('SC', 'Short circuit'), ('AB', 'Aborted')], db_index=True, default=None, max_length=3, null=True, verbose_name='result')),
                ('case_points', models.FloatField(default=0, verbose_name='test case points')),
                ('case_total', models.FloatField(default=0, verbose_name='test case total points')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='emath.Exam')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emath_user', to='judge.Profile')),
            ],
            options={
                'verbose_name': 'emath_submission',
                'verbose_name_plural': 'emath_submissions',
                'permissions': (('spam_emath_submission', 'Submit without limit'), ('view_all_emath_submission', 'View all submission'), ('lock_emath_submission', 'Change lock status of submission')),
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='A short, unique code for the problem, used in the url after /problem/', max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[a-z0-9]+$', 'Problem code must be ^[a-z0-9]+$')], verbose_name='code')),
                ('name', models.CharField(help_text='The full name of the problem, as shown in the problem list.', max_length=200, verbose_name='name')),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="Doesn't have magic ability to auto-publish due to backward compatibility", verbose_name='time')),
                ('point', models.FloatField(help_text="Points awarded for problem completion. Points are displayed with a 'p' suffix if partial.", validators=[django.core.validators.MinValueValidator(0)], verbose_name='points')),
                ('description', models.TextField(validators=[judge.models.problem.disallowed_characters_validator], verbose_name='problem body')),
                ('answer', models.CharField(help_text='One number that is the answer of this problem.', max_length=50, verbose_name='answer')),
                ('wrong_answer1', models.CharField(default=None, help_text='One number that is a wrong answer of this problem.', max_length=50, verbose_name='wrong answer')),
                ('wrong_answer2', models.CharField(default=None, help_text='One number that is a wrong answer of this problem.', max_length=50, verbose_name='wrong answer')),
                ('wrong_answer3', models.CharField(default=None, help_text='One number that is a wrong answer of this problem.', max_length=50, verbose_name='wrong answer')),
                ('is_public', models.BooleanField(db_index=True, default=False, verbose_name='publicly visible')),
                ('ac_rate', models.FloatField(default=0, verbose_name='solve rate')),
                ('user_count', models.IntegerField(default=0, help_text='The number of users who solved the problem.', verbose_name='number of users')),
                ('is_organization_private', models.BooleanField(default=False, verbose_name='private to organizations')),
                ('difficult', models.IntegerField(help_text='Difficult of problem', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name='difficult')),
                ('authors', models.ManyToManyField(blank=True, help_text='These users will be able to edit the problem, and be listed as authors.', related_name='emath_authors', to='judge.Profile', verbose_name='authors')),
                ('group', models.ForeignKey(help_text='The group of problem, shown under Category in the problem list.', on_delete=django.db.models.deletion.CASCADE, to='emath.MathGroup', verbose_name='group')),
                ('organizations', models.ManyToManyField(blank=True, help_text='If private, only these organizations may see the problem.', to='emath.Organization', verbose_name='organizations')),
            ],
            options={
                'permissions': (('view_private_math_problem', 'View private Math problems'), ('edit_own_math_problem', 'Edit own Math problems'), ('edit_all_math_problem', 'Edit all Math problems'), ('edit_public_math_problem', 'Edit all public Math problems'), ('see_organization_math_problem', 'See organizations-private Math problems'), ('change_public_math_visibility', 'Change public math problem visibility')),
            },
        ),
        migrations.CreateModel(
            name='OrganizationRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='request time')),
                ('state', models.CharField(choices=[('P', 'Pending'), ('A', 'Approved'), ('R', 'Rejected')], max_length=1, verbose_name='state')),
                ('reason', models.TextField(verbose_name='reason')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='emath.Organization', verbose_name='organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emath_requests', to='judge.Profile', verbose_name='user')),
            ],
            options={
                'verbose_name': 'organization join request',
                'verbose_name_plural': 'organization join requests',
            },
        ),
        migrations.CreateModel(
            name='ExamSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='submission time')),
                ('time', models.FloatField(db_index=True, null=True, verbose_name='execution time')),
                ('points', models.FloatField(db_index=True, null=True, verbose_name='points granted')),
                ('status', models.CharField(choices=[('QU', 'Queued'), ('P', 'Processing'), ('G', 'Grading'), ('D', 'Completed'), ('IE', 'Internal Error'), ('CE', 'Compile Error'), ('AB', 'Aborted')], db_index=True, default='QU', max_length=2, verbose_name='status')),
                ('result', models.CharField(blank=True, choices=[('AC', 'Accepted'), ('WA', 'Wrong Answer'), ('TLE', 'Time Limit Exceeded'), ('MLE', 'Memory Limit Exceeded'), ('OLE', 'Output Limit Exceeded'), ('IR', 'Invalid Return'), ('RTE', 'Runtime Error'), ('CE', 'Compile Error'), ('IE', 'Internal Error'), ('SC', 'Short circuit'), ('AB', 'Aborted')], db_index=True, default=None, max_length=3, null=True, verbose_name='result')),
                ('current_testcase', models.IntegerField(default=0)),
                ('batch', models.BooleanField(default=False, verbose_name='batched cases')),
                ('case_points', models.FloatField(default=0, verbose_name='test case points')),
                ('case_total', models.FloatField(default=0, verbose_name='test case total points')),
                ('judged_date', models.DateTimeField(default=None, null=True, verbose_name='submission judge time')),
                ('rejudged_date', models.DateTimeField(blank=True, null=True, verbose_name='last rejudge date by admin')),
                ('locked_after', models.DateTimeField(blank=True, null=True, verbose_name='submission lock')),
                ('exam_object', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='emath.Exam', verbose_name='exam')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='emath.Problem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='ExamProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(verbose_name='point')),
                ('order', models.PositiveIntegerField(db_index=True, verbose_name='order')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_problems', to='emath.Exam', verbose_name='exam')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='emath.Problem', verbose_name='problem')),
            ],
            options={
                'verbose_name': 'exam problem',
                'verbose_name_plural': 'exam problems',
                'ordering': ('order',),
                'unique_together': {('problem', 'exam')},
            },
        ),
        migrations.AddField(
            model_name='exam',
            name='organizations',
            field=models.ManyToManyField(blank=True, help_text='If private, only these organizations may see the exam', to='emath.Organization', verbose_name='organizations'),
        ),
        migrations.AddField(
            model_name='exam',
            name='private_contestants',
            field=models.ManyToManyField(blank=True, help_text='If private, only these users may see the exam', related_name='_exam_private_contestants_+', to='judge.Profile', verbose_name='private examants'),
        ),
        migrations.AddField(
            model_name='exam',
            name='problems',
            field=models.ManyToManyField(through='emath.ExamProblem', to='emath.Problem', verbose_name='problems'),
        ),
        migrations.AddField(
            model_name='exam',
            name='rate_exclude',
            field=models.ManyToManyField(blank=True, related_name='_exam_rate_exclude_+', to='judge.Profile', verbose_name='exclude from ratings'),
        ),
        migrations.AddField(
            model_name='exam',
            name='testers',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to view the exam, but not edit it.', related_name='_exam_testers_+', to='judge.Profile'),
        ),
        migrations.AddField(
            model_name='exam',
            name='view_exam_scoreboard',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to view the scoreboard.', related_name='view_exam_scoreboard', to='judge.Profile', verbose_name='view exam scoreboard'),
        ),
        migrations.CreateModel(
            name='ExamParticipation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('real_start', models.DateTimeField(db_column='start', default=django.utils.timezone.now, verbose_name='start time')),
                ('score', models.FloatField(db_index=True, default=0, verbose_name='score')),
                ('cumtime', models.PositiveIntegerField(default=0, verbose_name='cumulative time')),
                ('is_disqualified', models.BooleanField(default=False, help_text='Whether this participation is disqualified.', verbose_name='is disqualified')),
                ('tiebreaker', models.FloatField(default=0.0, verbose_name='tie-breaking field')),
                ('virtual', models.IntegerField(default=0, help_text='0 means non-virtual, otherwise the n-th virtual participation.', verbose_name='virtual participation id')),
                ('format_data', jsonfield.fields.JSONField(blank=True, null=True, verbose_name='exam format specific data')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='emath.Exam', verbose_name='associated exam')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_history', to='judge.Profile', verbose_name='user')),
            ],
            options={
                'verbose_name': 'exam participation',
                'verbose_name_plural': 'exam participations',
                'unique_together': {('exam', 'user', 'virtual')},
            },
        ),
    ]
